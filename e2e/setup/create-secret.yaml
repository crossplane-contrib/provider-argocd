---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: provider-secret-creator
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: provider-secret-creator
  namespace: argocd
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "get", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: provider-secret-creator
  namespace: argocd
subjects:
  - kind: ServiceAccount
    name: provider-secret-creator
    namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: provider-secret-creator
---
# Creates a Provider secret using the initial admin secret by querying argocd apis
apiVersion: v1
kind: Pod
metadata:
  name: provider-secret-creator
  namespace: argocd
spec:
  restartPolicy: Never
  serviceAccountName: provider-secret-creator
  containers:
    - name: bar
      image: alpine:3.18
      command: [ "/bin/sh" ]
      args:
        - -c
        - >
          set -x;
          set -o pipefail;
          apk add --no-cache --update curl jq;
          curl -L -o /usr/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl";
          chmod +x /usr/bin/kubectl;
          kubectl version;
          ARGOCD_ADMIN_SECRET=$(kubectl get secrets argocd-initial-admin-secret -n argocd  -o json | jq .data.password -r |base64 -d);
          ARGOCD_ADMIN_TOKEN=$(curl -s -X POST  -H "Content-Type: application/json" -k --data '{"username":"admin","password":"'"$ARGOCD_ADMIN_SECRET"'"}' https://argocd-server.argocd.svc:443/api/v1/session | jq -r .token);
          ARGOCD_PROVIDER_USER="provider-argocd";
          ARGOCD_TOKEN=$(curl -s -X POST -k -H "Authorization: Bearer $ARGOCD_ADMIN_TOKEN" -H "Content-Type: application/json" https://argocd-server.argocd.svc:443/api/v1/account/$ARGOCD_PROVIDER_USER/token | jq -r .token);
          kubectl create secret generic --dry-run=client --save-config argocd-credentials  -n crossplane-system --from-literal=authToken="$ARGOCD_TOKEN" -o yaml | kubectl apply -f -;



// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-argocd/apis/cluster/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-argocd/apis/repositories/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Project.
func (mg *Project) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: mg.Spec.ForProvider.SourceRepos,
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SourceReposRefs,
		Selector:      mg.Spec.ForProvider.SourceReposSelector,
		To: reference.To{
			List:    &v1alpha1.RepositoryList{},
			Managed: &v1alpha1.Repository{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceRepos")
	}
	mg.Spec.ForProvider.SourceRepos = mrsp.ResolvedValues
	mg.Spec.ForProvider.SourceReposRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destinations); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destinations[i3].Server),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Destinations[i3].ServerRef,
			Selector:     mg.Spec.ForProvider.Destinations[i3].ServerSelector,
			To: reference.To{
				List:    &v1alpha11.ClusterList{},
				Managed: &v1alpha11.Cluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destinations[i3].Server")
		}
		mg.Spec.ForProvider.Destinations[i3].Server = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destinations[i3].ServerRef = rsp.ResolvedReference

	}

	return nil
}

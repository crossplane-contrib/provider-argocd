// Code generated by copystruct. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RepositoryParameters define the desired state of an ArgoCD Git Repository
type RepositoryParameters struct {
	// URL of the repo
	// +immutable
	Repo string `json:"repo"`
	// Username for authenticating at the repo server
	// +optional
	Username *string `json:"username,omitempty"`
	// Password for authenticating at the repo server
	// +optional
	PasswordRef *SecretReference `json:"passwordRef,omitempty"`
	// SSH private key data for authenticating at the repo server
	// only for Git repos
	// +optional
	// SSHPrivateKey *string `json:"sshPrivateKey,omitempty"`
	SSHPrivateKeyRef *SecretReference `json:"sshPrivateKeyRef,omitempty"`
	// Whether the repo is insecure
	// +optional
	Insecure *bool `json:"insecure,omitempty"`
	// Whether git-lfs support should be enabled for this repo
	// +optional
	EnableLFS *bool `json:"enableLfs,omitempty"`
	// TLS client cert data for authenticating at the repo server
	// +optional
	TLSClientCertDataRef *SecretReference `json:"tlsClientCertDataRef,omitempty"`
	// TLS client cert key for authenticating at the repo server
	// +optional
	TLSClientCertKeyRef *SecretReference `json:"tlsClientCertKeyRef,omitempty"`
	// type of the repo, maybe "git or "helm, "git" is assumed if empty or absent
	// +optional
	Type *string `json:"type,omitempty"`
	// Project is a reference to the project with scoped repositories
	// +optional
	// only for git repos
	Project *string `json:"project,omitempty"`
	// only for Helm repos
	// +optional
	Name *string `json:"name,omitempty"`
	// Whether credentials were inherited from a credential set
	// +optional
	InheritedCreds *bool `json:"inheritedCreds,omitempty"`
	// Whether helm-oci support should be enabled for this repo
	// +optional
	EnableOCI *bool `json:"enableOCI,omitempty"`
	// Github App Private Key PEM data
	// +optional
	GithubAppPrivateKeyRef *SecretReference `json:"githubAppPrivateKeyRef,omitempty"`
	// Github App ID of the app used to access the repo
	// +optional
	GithubAppID *int64 `json:"githubAppID,omitempty"`
	// Github App Installation ID of the installed GitHub App
	// +optional
	GithubAppInstallationID *int64 `json:"githubAppInstallationID,omitempty"`
	// Github App Enterprise base url if empty will default to https://api.github.com
	// +optional
	GitHubAppEnterpriseBaseURL *string `json:"githubAppEnterpriseBaseUrl,omitempty"`
}

// SecretReference holds the reference to a Kubernetes secret
type SecretReference struct {
	// Name of the secret.
	Name string `json:"name"`

	// Namespace of the secret.
	Namespace string `json:"namespace"`

	// Key whose value will be used.
	Key string `json:"key"`
}

// RepositoryObservation represents an argocd repository.
type RepositoryObservation struct {
	// Current state of repository server connecting
	ConnectionState ConnectionState `json:"connectionState,omitempty"`

	// Password tracks changes to a Password secret
	// +optional
	Password *PasswordObservation `json:"password,omitempty"`

	// SSHPrivateKey tracks changes to a SSHPrivateKey secret
	// +optional
	SSHPrivateKey *PasswordObservation `json:"sshPrivateKey,omitempty"`

	// TLSClientCertData tracks changes to a TLSClientCertData secret
	// +optional
	TLSClientCertData *PasswordObservation `json:"tlsClientCertData,omitempty"`

	// TLSClientCertKey tracks changes to a TLSClientCertKey secret
	// +optional
	TLSClientCertKey *PasswordObservation `json:"tlsClientCertKey,omitempty"`

	// GithubAppPrivateKey tracks changes to a GithubAppPrivateKey secret
	// +optional
	GithubAppPrivateKey *PasswordObservation `json:"githubAppPrivateKey,omitempty"`
}

// ConnectionState is the observed state of the argocd repository
type ConnectionState struct {
	Status     string   `json:"status,omitempty"`
	Message    string   `json:"message,omitempty"`
	ModifiedAt *v1.Time `json:"attemptedAt,omitempty"`
}

// PasswordObservation holds the status of a referenced password
type PasswordObservation struct {
	Secret SecretObservation `json:"secret,omitempty"`
}

// SecretObservation observes a secret
type SecretObservation struct {
	// ResourceVersion tracks the meta1.ResourceVersion of an Object
	ResourceVersion string `json:"resourceVersion,omitempty"`
}

// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	health "github.com/argoproj/gitops-engine/pkg/health"
	common "github.com/argoproj/gitops-engine/pkg/sync/common"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	"time"
)

type ConverterImpl struct{}

func (c *ConverterImpl) FromArgoApplicationStatus(source *v1alpha1.ApplicationStatus) *ArgoApplicationStatus {
	var pV1alpha1ArgoApplicationStatus *ArgoApplicationStatus
	if source != nil {
		var v1alpha1ArgoApplicationStatus ArgoApplicationStatus
		var v1alpha1ResourceStatusList []ResourceStatus
		if (*source).Resources != nil {
			v1alpha1ResourceStatusList = make([]ResourceStatus, len((*source).Resources))
			for i := 0; i < len((*source).Resources); i++ {
				v1alpha1ResourceStatusList[i] = c.v1alpha1ResourceStatusToV1alpha1ResourceStatus((*source).Resources[i])
			}
		}
		v1alpha1ArgoApplicationStatus.Resources = v1alpha1ResourceStatusList
		v1alpha1ArgoApplicationStatus.Sync = c.v1alpha1SyncStatusToV1alpha1SyncStatus((*source).Sync)
		var v1alpha1HealthStatus HealthStatus
		v1alpha1HealthStatus.Status = health.HealthStatusCode((*source).Health.Status)
		pString := (*source).Health.Message
		v1alpha1HealthStatus.Message = &pString
		v1alpha1ArgoApplicationStatus.Health = v1alpha1HealthStatus
		v1alpha1ArgoApplicationStatus.History = c.v1alpha1RevisionHistoriesToV1alpha1RevisionHistories((*source).History)
		var v1alpha1ApplicationConditionList []ApplicationCondition
		if (*source).Conditions != nil {
			v1alpha1ApplicationConditionList = make([]ApplicationCondition, len((*source).Conditions))
			for j := 0; j < len((*source).Conditions); j++ {
				v1alpha1ApplicationConditionList[j] = c.v1alpha1ApplicationConditionToV1alpha1ApplicationCondition((*source).Conditions[j])
			}
		}
		v1alpha1ArgoApplicationStatus.Conditions = v1alpha1ApplicationConditionList
		v1alpha1ArgoApplicationStatus.ReconciledAt = c.pV1TimeToPV1Time((*source).ReconciledAt)
		v1alpha1ArgoApplicationStatus.OperationState = c.pV1alpha1OperationStateToPV1alpha1OperationState((*source).OperationState)
		v1alpha1ArgoApplicationStatus.ObservedAt = c.pV1TimeToPV1Time((*source).ObservedAt)
		v1alpha1ArgoApplicationStatus.SourceType = c.v1alpha1ApplicationSourceTypeToV1alpha1ApplicationSourceType((*source).SourceType)
		v1alpha1ArgoApplicationStatus.Summary = c.v1alpha1ApplicationSummaryToV1alpha1ApplicationSummary((*source).Summary)
		v1alpha1ArgoApplicationStatus.ResourceHealthSource = string((*source).ResourceHealthSource)
		var v1alpha1ApplicationSourceTypeList []ApplicationSourceType
		if (*source).SourceTypes != nil {
			v1alpha1ApplicationSourceTypeList = make([]ApplicationSourceType, len((*source).SourceTypes))
			for k := 0; k < len((*source).SourceTypes); k++ {
				v1alpha1ApplicationSourceTypeList[k] = c.v1alpha1ApplicationSourceTypeToV1alpha1ApplicationSourceType((*source).SourceTypes[k])
			}
		}
		v1alpha1ArgoApplicationStatus.SourceTypes = v1alpha1ApplicationSourceTypeList
		pV1alpha1ArgoApplicationStatus = &v1alpha1ArgoApplicationStatus
	}
	return pV1alpha1ArgoApplicationStatus
}
func (c *ConverterImpl) FromArgoDestination(source v1alpha1.ApplicationDestination) ApplicationDestination {
	var v1alpha1ApplicationDestination ApplicationDestination
	pString := source.Server
	v1alpha1ApplicationDestination.Server = &pString
	pString2 := source.Namespace
	v1alpha1ApplicationDestination.Namespace = &pString2
	pString3 := source.Name
	v1alpha1ApplicationDestination.Name = &pString3
	return v1alpha1ApplicationDestination
}
func (c *ConverterImpl) FromArgoDestinationP(source *v1alpha1.ApplicationDestination) *ApplicationDestination {
	var pV1alpha1ApplicationDestination *ApplicationDestination
	if source != nil {
		v1alpha1ApplicationDestination := c.FromArgoDestination((*source))
		pV1alpha1ApplicationDestination = &v1alpha1ApplicationDestination
	}
	return pV1alpha1ApplicationDestination
}
func (c *ConverterImpl) ToArgoApplicationSpec(source *ApplicationParameters) *v1alpha1.ApplicationSpec {
	var pV1alpha1ApplicationSpec *v1alpha1.ApplicationSpec
	if source != nil {
		var v1alpha1ApplicationSpec v1alpha1.ApplicationSpec
		v1alpha1ApplicationSpec.Source = c.pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource2((*source).Source)
		v1alpha1ApplicationSpec.Destination = c.ToArgoDestination((*source).Destination)
		v1alpha1ApplicationSpec.Project = (*source).Project
		v1alpha1ApplicationSpec.SyncPolicy = c.pV1alpha1SyncPolicyToPV1alpha1SyncPolicy((*source).SyncPolicy)
		var v1alpha1ResourceIgnoreDifferencesList []v1alpha1.ResourceIgnoreDifferences
		if (*source).IgnoreDifferences != nil {
			v1alpha1ResourceIgnoreDifferencesList = make([]v1alpha1.ResourceIgnoreDifferences, len((*source).IgnoreDifferences))
			for i := 0; i < len((*source).IgnoreDifferences); i++ {
				v1alpha1ResourceIgnoreDifferencesList[i] = c.v1alpha1ResourceIgnoreDifferencesToV1alpha1ResourceIgnoreDifferences((*source).IgnoreDifferences[i])
			}
		}
		v1alpha1ApplicationSpec.IgnoreDifferences = v1alpha1ResourceIgnoreDifferencesList
		var v1alpha1InfoList []v1alpha1.Info
		if (*source).Info != nil {
			v1alpha1InfoList = make([]v1alpha1.Info, len((*source).Info))
			for j := 0; j < len((*source).Info); j++ {
				v1alpha1InfoList[j] = c.v1alpha1InfoToV1alpha1Info((*source).Info[j])
			}
		}
		v1alpha1ApplicationSpec.Info = v1alpha1InfoList
		var pInt64 *int64
		if (*source).RevisionHistoryLimit != nil {
			xint64 := *(*source).RevisionHistoryLimit
			pInt64 = &xint64
		}
		v1alpha1ApplicationSpec.RevisionHistoryLimit = pInt64
		v1alpha1ApplicationSpec.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources2((*source).Sources)
		pV1alpha1ApplicationSpec = &v1alpha1ApplicationSpec
	}
	return pV1alpha1ApplicationSpec
}
func (c *ConverterImpl) ToArgoDestination(source ApplicationDestination) v1alpha1.ApplicationDestination {
	var v1alpha1ApplicationDestination v1alpha1.ApplicationDestination
	var xstring string
	if source.Server != nil {
		xstring = *source.Server
	}
	v1alpha1ApplicationDestination.Server = xstring
	var xstring2 string
	if source.Namespace != nil {
		xstring2 = *source.Namespace
	}
	v1alpha1ApplicationDestination.Namespace = xstring2
	var xstring3 string
	if source.Name != nil {
		xstring3 = *source.Name
	}
	v1alpha1ApplicationDestination.Name = xstring3
	return v1alpha1ApplicationDestination
}
func (c *ConverterImpl) ToArgoDestinationP(source *ApplicationDestination) *v1alpha1.ApplicationDestination {
	var pV1alpha1ApplicationDestination *v1alpha1.ApplicationDestination
	if source != nil {
		v1alpha1ApplicationDestination := c.ToArgoDestination((*source))
		pV1alpha1ApplicationDestination = &v1alpha1ApplicationDestination
	}
	return pV1alpha1ApplicationDestination
}
func (c *ConverterImpl) commonHookTypeToString(source common.HookType) string {
	return string(source)
}
func (c *ConverterImpl) commonResultCodeToString(source common.ResultCode) string {
	return string(source)
}
func (c *ConverterImpl) commonSyncPhaseToString(source common.SyncPhase) string {
	return string(source)
}
func (c *ConverterImpl) intstrIntOrStringToIntstrIntOrString(source intstr.IntOrString) intstr.IntOrString {
	var intstrIntOrString intstr.IntOrString
	intstrIntOrString.Type = intstr.Type(source.Type)
	intstrIntOrString.IntVal = source.IntVal
	intstrIntOrString.StrVal = source.StrVal
	return intstrIntOrString
}
func (c *ConverterImpl) pV1TimeToPV1Time(source *v1.Time) *v1.Time {
	var pV1Time *v1.Time
	if source != nil {
		v1Time := c.v1TimeToV1Time((*source))
		pV1Time = &v1Time
	}
	return pV1Time
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory(source *v1alpha1.ApplicationSourceDirectory) *ApplicationSourceDirectory {
	var pV1alpha1ApplicationSourceDirectory *ApplicationSourceDirectory
	if source != nil {
		var v1alpha1ApplicationSourceDirectory ApplicationSourceDirectory
		pBool := (*source).Recurse
		v1alpha1ApplicationSourceDirectory.Recurse = &pBool
		v1alpha1ApplicationSourceDirectory.Jsonnet = c.v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet((*source).Jsonnet)
		pString := (*source).Exclude
		v1alpha1ApplicationSourceDirectory.Exclude = &pString
		pString2 := (*source).Include
		v1alpha1ApplicationSourceDirectory.Include = &pString2
		pV1alpha1ApplicationSourceDirectory = &v1alpha1ApplicationSourceDirectory
	}
	return pV1alpha1ApplicationSourceDirectory
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory2(source *ApplicationSourceDirectory) *v1alpha1.ApplicationSourceDirectory {
	var pV1alpha1ApplicationSourceDirectory *v1alpha1.ApplicationSourceDirectory
	if source != nil {
		var v1alpha1ApplicationSourceDirectory v1alpha1.ApplicationSourceDirectory
		var xbool bool
		if (*source).Recurse != nil {
			xbool = *(*source).Recurse
		}
		v1alpha1ApplicationSourceDirectory.Recurse = xbool
		v1alpha1ApplicationSourceDirectory.Jsonnet = c.v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet2((*source).Jsonnet)
		var xstring string
		if (*source).Exclude != nil {
			xstring = *(*source).Exclude
		}
		v1alpha1ApplicationSourceDirectory.Exclude = xstring
		var xstring2 string
		if (*source).Include != nil {
			xstring2 = *(*source).Include
		}
		v1alpha1ApplicationSourceDirectory.Include = xstring2
		pV1alpha1ApplicationSourceDirectory = &v1alpha1ApplicationSourceDirectory
	}
	return pV1alpha1ApplicationSourceDirectory
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm(source *v1alpha1.ApplicationSourceHelm) *ApplicationSourceHelm {
	var pV1alpha1ApplicationSourceHelm *ApplicationSourceHelm
	if source != nil {
		var v1alpha1ApplicationSourceHelm ApplicationSourceHelm
		var stringList []string
		if (*source).ValueFiles != nil {
			stringList = make([]string, len((*source).ValueFiles))
			for i := 0; i < len((*source).ValueFiles); i++ {
				stringList[i] = (*source).ValueFiles[i]
			}
		}
		v1alpha1ApplicationSourceHelm.ValueFiles = stringList
		var v1alpha1HelmParameterList []HelmParameter
		if (*source).Parameters != nil {
			v1alpha1HelmParameterList = make([]HelmParameter, len((*source).Parameters))
			for j := 0; j < len((*source).Parameters); j++ {
				v1alpha1HelmParameterList[j] = c.v1alpha1HelmParameterToV1alpha1HelmParameter((*source).Parameters[j])
			}
		}
		v1alpha1ApplicationSourceHelm.Parameters = v1alpha1HelmParameterList
		pString := (*source).ReleaseName
		v1alpha1ApplicationSourceHelm.ReleaseName = &pString
		pString2 := (*source).Values
		v1alpha1ApplicationSourceHelm.Values = &pString2
		var v1alpha1HelmFileParameterList []HelmFileParameter
		if (*source).FileParameters != nil {
			v1alpha1HelmFileParameterList = make([]HelmFileParameter, len((*source).FileParameters))
			for k := 0; k < len((*source).FileParameters); k++ {
				v1alpha1HelmFileParameterList[k] = c.v1alpha1HelmFileParameterToV1alpha1HelmFileParameter((*source).FileParameters[k])
			}
		}
		v1alpha1ApplicationSourceHelm.FileParameters = v1alpha1HelmFileParameterList
		pString3 := (*source).Version
		v1alpha1ApplicationSourceHelm.Version = &pString3
		pBool := (*source).PassCredentials
		v1alpha1ApplicationSourceHelm.PassCredentials = &pBool
		pBool2 := (*source).IgnoreMissingValueFiles
		v1alpha1ApplicationSourceHelm.IgnoreMissingValueFiles = &pBool2
		pBool3 := (*source).SkipCrds
		v1alpha1ApplicationSourceHelm.SkipCrds = &pBool3
		pV1alpha1ApplicationSourceHelm = &v1alpha1ApplicationSourceHelm
	}
	return pV1alpha1ApplicationSourceHelm
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm2(source *ApplicationSourceHelm) *v1alpha1.ApplicationSourceHelm {
	var pV1alpha1ApplicationSourceHelm *v1alpha1.ApplicationSourceHelm
	if source != nil {
		var v1alpha1ApplicationSourceHelm v1alpha1.ApplicationSourceHelm
		var stringList []string
		if (*source).ValueFiles != nil {
			stringList = make([]string, len((*source).ValueFiles))
			for i := 0; i < len((*source).ValueFiles); i++ {
				stringList[i] = (*source).ValueFiles[i]
			}
		}
		v1alpha1ApplicationSourceHelm.ValueFiles = stringList
		var v1alpha1HelmParameterList []v1alpha1.HelmParameter
		if (*source).Parameters != nil {
			v1alpha1HelmParameterList = make([]v1alpha1.HelmParameter, len((*source).Parameters))
			for j := 0; j < len((*source).Parameters); j++ {
				v1alpha1HelmParameterList[j] = c.v1alpha1HelmParameterToV1alpha1HelmParameter2((*source).Parameters[j])
			}
		}
		v1alpha1ApplicationSourceHelm.Parameters = v1alpha1HelmParameterList
		var xstring string
		if (*source).ReleaseName != nil {
			xstring = *(*source).ReleaseName
		}
		v1alpha1ApplicationSourceHelm.ReleaseName = xstring
		var xstring2 string
		if (*source).Values != nil {
			xstring2 = *(*source).Values
		}
		v1alpha1ApplicationSourceHelm.Values = xstring2
		var v1alpha1HelmFileParameterList []v1alpha1.HelmFileParameter
		if (*source).FileParameters != nil {
			v1alpha1HelmFileParameterList = make([]v1alpha1.HelmFileParameter, len((*source).FileParameters))
			for k := 0; k < len((*source).FileParameters); k++ {
				v1alpha1HelmFileParameterList[k] = c.v1alpha1HelmFileParameterToV1alpha1HelmFileParameter2((*source).FileParameters[k])
			}
		}
		v1alpha1ApplicationSourceHelm.FileParameters = v1alpha1HelmFileParameterList
		var xstring3 string
		if (*source).Version != nil {
			xstring3 = *(*source).Version
		}
		v1alpha1ApplicationSourceHelm.Version = xstring3
		var xbool bool
		if (*source).PassCredentials != nil {
			xbool = *(*source).PassCredentials
		}
		v1alpha1ApplicationSourceHelm.PassCredentials = xbool
		var xbool2 bool
		if (*source).IgnoreMissingValueFiles != nil {
			xbool2 = *(*source).IgnoreMissingValueFiles
		}
		v1alpha1ApplicationSourceHelm.IgnoreMissingValueFiles = xbool2
		var xbool3 bool
		if (*source).SkipCrds != nil {
			xbool3 = *(*source).SkipCrds
		}
		v1alpha1ApplicationSourceHelm.SkipCrds = xbool3
		pV1alpha1ApplicationSourceHelm = &v1alpha1ApplicationSourceHelm
	}
	return pV1alpha1ApplicationSourceHelm
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize(source *v1alpha1.ApplicationSourceKustomize) *ApplicationSourceKustomize {
	var pV1alpha1ApplicationSourceKustomize *ApplicationSourceKustomize
	if source != nil {
		var v1alpha1ApplicationSourceKustomize ApplicationSourceKustomize
		pString := (*source).NamePrefix
		v1alpha1ApplicationSourceKustomize.NamePrefix = &pString
		pString2 := (*source).NameSuffix
		v1alpha1ApplicationSourceKustomize.NameSuffix = &pString2
		v1alpha1ApplicationSourceKustomize.Images = c.v1alpha1KustomizeImagesToV1alpha1KustomizeImages((*source).Images)
		mapStringString := make(map[string]string, len((*source).CommonLabels))
		for key, value := range (*source).CommonLabels {
			mapStringString[key] = value
		}
		v1alpha1ApplicationSourceKustomize.CommonLabels = mapStringString
		pString3 := (*source).Version
		v1alpha1ApplicationSourceKustomize.Version = &pString3
		mapStringString2 := make(map[string]string, len((*source).CommonAnnotations))
		for key2, value2 := range (*source).CommonAnnotations {
			mapStringString2[key2] = value2
		}
		v1alpha1ApplicationSourceKustomize.CommonAnnotations = mapStringString2
		pBool := (*source).ForceCommonLabels
		v1alpha1ApplicationSourceKustomize.ForceCommonLabels = &pBool
		pBool2 := (*source).ForceCommonAnnotations
		v1alpha1ApplicationSourceKustomize.ForceCommonAnnotations = &pBool2
		pString4 := (*source).Namespace
		v1alpha1ApplicationSourceKustomize.Namespace = &pString4
		pBool3 := (*source).CommonAnnotationsEnvsubst
		v1alpha1ApplicationSourceKustomize.CommonAnnotationsEnvsubst = &pBool3
		v1alpha1ApplicationSourceKustomize.Replicas = c.v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas((*source).Replicas)
		pV1alpha1ApplicationSourceKustomize = &v1alpha1ApplicationSourceKustomize
	}
	return pV1alpha1ApplicationSourceKustomize
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize2(source *ApplicationSourceKustomize) *v1alpha1.ApplicationSourceKustomize {
	var pV1alpha1ApplicationSourceKustomize *v1alpha1.ApplicationSourceKustomize
	if source != nil {
		var v1alpha1ApplicationSourceKustomize v1alpha1.ApplicationSourceKustomize
		var xstring string
		if (*source).NamePrefix != nil {
			xstring = *(*source).NamePrefix
		}
		v1alpha1ApplicationSourceKustomize.NamePrefix = xstring
		var xstring2 string
		if (*source).NameSuffix != nil {
			xstring2 = *(*source).NameSuffix
		}
		v1alpha1ApplicationSourceKustomize.NameSuffix = xstring2
		v1alpha1ApplicationSourceKustomize.Images = c.v1alpha1KustomizeImagesToV1alpha1KustomizeImages2((*source).Images)
		mapStringString := make(map[string]string, len((*source).CommonLabels))
		for key, value := range (*source).CommonLabels {
			mapStringString[key] = value
		}
		v1alpha1ApplicationSourceKustomize.CommonLabels = mapStringString
		var xstring3 string
		if (*source).Version != nil {
			xstring3 = *(*source).Version
		}
		v1alpha1ApplicationSourceKustomize.Version = xstring3
		mapStringString2 := make(map[string]string, len((*source).CommonAnnotations))
		for key2, value2 := range (*source).CommonAnnotations {
			mapStringString2[key2] = value2
		}
		v1alpha1ApplicationSourceKustomize.CommonAnnotations = mapStringString2
		var xbool bool
		if (*source).ForceCommonLabels != nil {
			xbool = *(*source).ForceCommonLabels
		}
		v1alpha1ApplicationSourceKustomize.ForceCommonLabels = xbool
		var xbool2 bool
		if (*source).ForceCommonAnnotations != nil {
			xbool2 = *(*source).ForceCommonAnnotations
		}
		v1alpha1ApplicationSourceKustomize.ForceCommonAnnotations = xbool2
		var xstring4 string
		if (*source).Namespace != nil {
			xstring4 = *(*source).Namespace
		}
		v1alpha1ApplicationSourceKustomize.Namespace = xstring4
		var xbool3 bool
		if (*source).CommonAnnotationsEnvsubst != nil {
			xbool3 = *(*source).CommonAnnotationsEnvsubst
		}
		v1alpha1ApplicationSourceKustomize.CommonAnnotationsEnvsubst = xbool3
		v1alpha1ApplicationSourceKustomize.Replicas = c.v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas2((*source).Replicas)
		pV1alpha1ApplicationSourceKustomize = &v1alpha1ApplicationSourceKustomize
	}
	return pV1alpha1ApplicationSourceKustomize
}
func (c *ConverterImpl) pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin(source *v1alpha1.ApplicationSourcePlugin) *ApplicationSourcePlugin {
	var pV1alpha1ApplicationSourcePlugin *ApplicationSourcePlugin
	if source != nil {
		var v1alpha1ApplicationSourcePlugin ApplicationSourcePlugin
		pString := (*source).Name
		v1alpha1ApplicationSourcePlugin.Name = &pString
		v1alpha1ApplicationSourcePlugin.Env = c.v1alpha1EnvToV1alpha1Env((*source).Env)
		v1alpha1ApplicationSourcePlugin.Parameters = c.v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters((*source).Parameters)
		pV1alpha1ApplicationSourcePlugin = &v1alpha1ApplicationSourcePlugin
	}
	return pV1alpha1ApplicationSourcePlugin
}
func (c *ConverterImpl) pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin2(source *ApplicationSourcePlugin) *v1alpha1.ApplicationSourcePlugin {
	var pV1alpha1ApplicationSourcePlugin *v1alpha1.ApplicationSourcePlugin
	if source != nil {
		var v1alpha1ApplicationSourcePlugin v1alpha1.ApplicationSourcePlugin
		var xstring string
		if (*source).Name != nil {
			xstring = *(*source).Name
		}
		v1alpha1ApplicationSourcePlugin.Name = xstring
		v1alpha1ApplicationSourcePlugin.Env = c.v1alpha1EnvToV1alpha1Env2((*source).Env)
		v1alpha1ApplicationSourcePlugin.Parameters = c.v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters2((*source).Parameters)
		pV1alpha1ApplicationSourcePlugin = &v1alpha1ApplicationSourcePlugin
	}
	return pV1alpha1ApplicationSourcePlugin
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource(source *v1alpha1.ApplicationSource) *ApplicationSource {
	var pV1alpha1ApplicationSource *ApplicationSource
	if source != nil {
		v1alpha1ApplicationSource := c.v1alpha1ApplicationSourceToV1alpha1ApplicationSource((*source))
		pV1alpha1ApplicationSource = &v1alpha1ApplicationSource
	}
	return pV1alpha1ApplicationSource
}
func (c *ConverterImpl) pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource2(source *ApplicationSource) *v1alpha1.ApplicationSource {
	var pV1alpha1ApplicationSource *v1alpha1.ApplicationSource
	if source != nil {
		var v1alpha1ApplicationSource v1alpha1.ApplicationSource
		v1alpha1ApplicationSource.RepoURL = (*source).RepoURL
		var xstring string
		if (*source).Path != nil {
			xstring = *(*source).Path
		}
		v1alpha1ApplicationSource.Path = xstring
		var xstring2 string
		if (*source).TargetRevision != nil {
			xstring2 = *(*source).TargetRevision
		}
		v1alpha1ApplicationSource.TargetRevision = xstring2
		v1alpha1ApplicationSource.Helm = c.pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm2((*source).Helm)
		v1alpha1ApplicationSource.Kustomize = c.pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize2((*source).Kustomize)
		v1alpha1ApplicationSource.Directory = c.pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory2((*source).Directory)
		v1alpha1ApplicationSource.Plugin = c.pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin2((*source).Plugin)
		var xstring3 string
		if (*source).Chart != nil {
			xstring3 = *(*source).Chart
		}
		v1alpha1ApplicationSource.Chart = xstring3
		var xstring4 string
		if (*source).Ref != nil {
			xstring4 = *(*source).Ref
		}
		v1alpha1ApplicationSource.Ref = xstring4
		pV1alpha1ApplicationSource = &v1alpha1ApplicationSource
	}
	return pV1alpha1ApplicationSource
}
func (c *ConverterImpl) pV1alpha1BackoffToPV1alpha1Backoff(source *v1alpha1.Backoff) *Backoff {
	var pV1alpha1Backoff *Backoff
	if source != nil {
		var v1alpha1Backoff Backoff
		pString := (*source).Duration
		v1alpha1Backoff.Duration = &pString
		var pInt64 *int64
		if (*source).Factor != nil {
			xint64 := *(*source).Factor
			pInt64 = &xint64
		}
		v1alpha1Backoff.Factor = pInt64
		pString2 := (*source).MaxDuration
		v1alpha1Backoff.MaxDuration = &pString2
		pV1alpha1Backoff = &v1alpha1Backoff
	}
	return pV1alpha1Backoff
}
func (c *ConverterImpl) pV1alpha1BackoffToPV1alpha1Backoff2(source *Backoff) *v1alpha1.Backoff {
	var pV1alpha1Backoff *v1alpha1.Backoff
	if source != nil {
		var v1alpha1Backoff v1alpha1.Backoff
		var xstring string
		if (*source).Duration != nil {
			xstring = *(*source).Duration
		}
		v1alpha1Backoff.Duration = xstring
		var pInt64 *int64
		if (*source).Factor != nil {
			xint64 := *(*source).Factor
			pInt64 = &xint64
		}
		v1alpha1Backoff.Factor = pInt64
		var xstring2 string
		if (*source).MaxDuration != nil {
			xstring2 = *(*source).MaxDuration
		}
		v1alpha1Backoff.MaxDuration = xstring2
		pV1alpha1Backoff = &v1alpha1Backoff
	}
	return pV1alpha1Backoff
}
func (c *ConverterImpl) pV1alpha1EnvEntryToPV1alpha1EnvEntry(source *v1alpha1.EnvEntry) *EnvEntry {
	var pV1alpha1EnvEntry *EnvEntry
	if source != nil {
		var v1alpha1EnvEntry EnvEntry
		v1alpha1EnvEntry.Name = (*source).Name
		v1alpha1EnvEntry.Value = (*source).Value
		pV1alpha1EnvEntry = &v1alpha1EnvEntry
	}
	return pV1alpha1EnvEntry
}
func (c *ConverterImpl) pV1alpha1EnvEntryToPV1alpha1EnvEntry2(source *EnvEntry) *v1alpha1.EnvEntry {
	var pV1alpha1EnvEntry *v1alpha1.EnvEntry
	if source != nil {
		var v1alpha1EnvEntry v1alpha1.EnvEntry
		v1alpha1EnvEntry.Name = (*source).Name
		v1alpha1EnvEntry.Value = (*source).Value
		pV1alpha1EnvEntry = &v1alpha1EnvEntry
	}
	return pV1alpha1EnvEntry
}
func (c *ConverterImpl) pV1alpha1HealthStatusToPV1alpha1HealthStatus(source *v1alpha1.HealthStatus) *HealthStatus {
	var pV1alpha1HealthStatus *HealthStatus
	if source != nil {
		var v1alpha1HealthStatus HealthStatus
		v1alpha1HealthStatus.Status = health.HealthStatusCode((*source).Status)
		pString := (*source).Message
		v1alpha1HealthStatus.Message = &pString
		pV1alpha1HealthStatus = &v1alpha1HealthStatus
	}
	return pV1alpha1HealthStatus
}
func (c *ConverterImpl) pV1alpha1InfoToPV1alpha1Info(source *v1alpha1.Info) *Info {
	var pV1alpha1Info *Info
	if source != nil {
		var v1alpha1Info Info
		v1alpha1Info.Name = (*source).Name
		v1alpha1Info.Value = (*source).Value
		pV1alpha1Info = &v1alpha1Info
	}
	return pV1alpha1Info
}
func (c *ConverterImpl) pV1alpha1ManagedNamespaceMetadataToPV1alpha1ManagedNamespaceMetadata(source *ManagedNamespaceMetadata) *v1alpha1.ManagedNamespaceMetadata {
	var pV1alpha1ManagedNamespaceMetadata *v1alpha1.ManagedNamespaceMetadata
	if source != nil {
		var v1alpha1ManagedNamespaceMetadata v1alpha1.ManagedNamespaceMetadata
		mapStringString := make(map[string]string, len((*source).Labels))
		for key, value := range (*source).Labels {
			mapStringString[key] = value
		}
		v1alpha1ManagedNamespaceMetadata.Labels = mapStringString
		mapStringString2 := make(map[string]string, len((*source).Annotations))
		for key2, value2 := range (*source).Annotations {
			mapStringString2[key2] = value2
		}
		v1alpha1ManagedNamespaceMetadata.Annotations = mapStringString2
		pV1alpha1ManagedNamespaceMetadata = &v1alpha1ManagedNamespaceMetadata
	}
	return pV1alpha1ManagedNamespaceMetadata
}
func (c *ConverterImpl) pV1alpha1OperationStateToPV1alpha1OperationState(source *v1alpha1.OperationState) *OperationState {
	var pV1alpha1OperationState *OperationState
	if source != nil {
		var v1alpha1OperationState OperationState
		v1alpha1OperationState.Operation = c.v1alpha1OperationToV1alpha1Operation((*source).Operation)
		v1alpha1OperationState.Phase = OperationPhase((*source).Phase)
		pString := (*source).Message
		v1alpha1OperationState.Message = &pString
		v1alpha1OperationState.SyncResult = c.pV1alpha1SyncOperationResultToPV1alpha1SyncOperationResult((*source).SyncResult)
		v1alpha1OperationState.StartedAt = c.v1TimeToPV1Time((*source).StartedAt)
		v1alpha1OperationState.FinishedAt = c.pV1TimeToPV1Time((*source).FinishedAt)
		pInt64 := (*source).RetryCount
		v1alpha1OperationState.RetryCount = &pInt64
		pV1alpha1OperationState = &v1alpha1OperationState
	}
	return pV1alpha1OperationState
}
func (c *ConverterImpl) pV1alpha1OptionalArrayToPV1alpha1OptionalArray(source *v1alpha1.OptionalArray) *OptionalArray {
	var pV1alpha1OptionalArray *OptionalArray
	if source != nil {
		var v1alpha1OptionalArray OptionalArray
		var stringList []string
		if (*source).Array != nil {
			stringList = make([]string, len((*source).Array))
			for i := 0; i < len((*source).Array); i++ {
				stringList[i] = (*source).Array[i]
			}
		}
		v1alpha1OptionalArray.Array = stringList
		pV1alpha1OptionalArray = &v1alpha1OptionalArray
	}
	return pV1alpha1OptionalArray
}
func (c *ConverterImpl) pV1alpha1OptionalArrayToPV1alpha1OptionalArray2(source *OptionalArray) *v1alpha1.OptionalArray {
	var pV1alpha1OptionalArray *v1alpha1.OptionalArray
	if source != nil {
		var v1alpha1OptionalArray v1alpha1.OptionalArray
		var stringList []string
		if (*source).Array != nil {
			stringList = make([]string, len((*source).Array))
			for i := 0; i < len((*source).Array); i++ {
				stringList[i] = (*source).Array[i]
			}
		}
		v1alpha1OptionalArray.Array = stringList
		pV1alpha1OptionalArray = &v1alpha1OptionalArray
	}
	return pV1alpha1OptionalArray
}
func (c *ConverterImpl) pV1alpha1OptionalMapToPV1alpha1OptionalMap(source *v1alpha1.OptionalMap) *OptionalMap {
	var pV1alpha1OptionalMap *OptionalMap
	if source != nil {
		var v1alpha1OptionalMap OptionalMap
		mapStringString := make(map[string]string, len((*source).Map))
		for key, value := range (*source).Map {
			mapStringString[key] = value
		}
		v1alpha1OptionalMap.Map = mapStringString
		pV1alpha1OptionalMap = &v1alpha1OptionalMap
	}
	return pV1alpha1OptionalMap
}
func (c *ConverterImpl) pV1alpha1OptionalMapToPV1alpha1OptionalMap2(source *OptionalMap) *v1alpha1.OptionalMap {
	var pV1alpha1OptionalMap *v1alpha1.OptionalMap
	if source != nil {
		var v1alpha1OptionalMap v1alpha1.OptionalMap
		mapStringString := make(map[string]string, len((*source).Map))
		for key, value := range (*source).Map {
			mapStringString[key] = value
		}
		v1alpha1OptionalMap.Map = mapStringString
		pV1alpha1OptionalMap = &v1alpha1OptionalMap
	}
	return pV1alpha1OptionalMap
}
func (c *ConverterImpl) pV1alpha1ResourceResultToPV1alpha1ResourceResult(source *v1alpha1.ResourceResult) *ResourceResult {
	var pV1alpha1ResourceResult *ResourceResult
	if source != nil {
		var v1alpha1ResourceResult ResourceResult
		v1alpha1ResourceResult.Group = (*source).Group
		v1alpha1ResourceResult.Version = (*source).Version
		v1alpha1ResourceResult.Kind = (*source).Kind
		v1alpha1ResourceResult.Namespace = (*source).Namespace
		v1alpha1ResourceResult.Name = (*source).Name
		pString := c.commonResultCodeToString((*source).Status)
		v1alpha1ResourceResult.Status = &pString
		pString2 := (*source).Message
		v1alpha1ResourceResult.Message = &pString2
		pString3 := c.commonHookTypeToString((*source).HookType)
		v1alpha1ResourceResult.HookType = &pString3
		v1alpha1ResourceResult.HookPhase = OperationPhase((*source).HookPhase)
		pString4 := c.commonSyncPhaseToString((*source).SyncPhase)
		v1alpha1ResourceResult.SyncPhase = &pString4
		pV1alpha1ResourceResult = &v1alpha1ResourceResult
	}
	return pV1alpha1ResourceResult
}
func (c *ConverterImpl) pV1alpha1RetryStrategyToPV1alpha1RetryStrategy(source *RetryStrategy) *v1alpha1.RetryStrategy {
	var pV1alpha1RetryStrategy *v1alpha1.RetryStrategy
	if source != nil {
		var v1alpha1RetryStrategy v1alpha1.RetryStrategy
		var xint64 int64
		if (*source).Limit != nil {
			xint64 = *(*source).Limit
		}
		v1alpha1RetryStrategy.Limit = xint64
		v1alpha1RetryStrategy.Backoff = c.pV1alpha1BackoffToPV1alpha1Backoff2((*source).Backoff)
		pV1alpha1RetryStrategy = &v1alpha1RetryStrategy
	}
	return pV1alpha1RetryStrategy
}
func (c *ConverterImpl) pV1alpha1SyncOperationResultToPV1alpha1SyncOperationResult(source *v1alpha1.SyncOperationResult) *SyncOperationResult {
	var pV1alpha1SyncOperationResult *SyncOperationResult
	if source != nil {
		var v1alpha1SyncOperationResult SyncOperationResult
		v1alpha1SyncOperationResult.Resources = c.v1alpha1ResourceResultsToV1alpha1ResourceResults((*source).Resources)
		v1alpha1SyncOperationResult.Revision = (*source).Revision
		v1alpha1SyncOperationResult.Source = c.v1alpha1ApplicationSourceToV1alpha1ApplicationSource((*source).Source)
		v1alpha1SyncOperationResult.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources((*source).Sources)
		var stringList []string
		if (*source).Revisions != nil {
			stringList = make([]string, len((*source).Revisions))
			for i := 0; i < len((*source).Revisions); i++ {
				stringList[i] = (*source).Revisions[i]
			}
		}
		v1alpha1SyncOperationResult.Revisions = stringList
		pV1alpha1SyncOperationResult = &v1alpha1SyncOperationResult
	}
	return pV1alpha1SyncOperationResult
}
func (c *ConverterImpl) pV1alpha1SyncOperationToPV1alpha1SyncOperation(source *v1alpha1.SyncOperation) *SyncOperation {
	var pV1alpha1SyncOperation *SyncOperation
	if source != nil {
		var v1alpha1SyncOperation SyncOperation
		pString := (*source).Revision
		v1alpha1SyncOperation.Revision = &pString
		pBool := (*source).Prune
		v1alpha1SyncOperation.Prune = &pBool
		pBool2 := (*source).DryRun
		v1alpha1SyncOperation.DryRun = &pBool2
		v1alpha1SyncOperation.SyncStrategy = c.pV1alpha1SyncStrategyToPV1alpha1SyncStrategy((*source).SyncStrategy)
		var v1alpha1SyncOperationResourceList []SyncOperationResource
		if (*source).Resources != nil {
			v1alpha1SyncOperationResourceList = make([]SyncOperationResource, len((*source).Resources))
			for i := 0; i < len((*source).Resources); i++ {
				v1alpha1SyncOperationResourceList[i] = c.v1alpha1SyncOperationResourceToV1alpha1SyncOperationResource((*source).Resources[i])
			}
		}
		v1alpha1SyncOperation.Resources = v1alpha1SyncOperationResourceList
		v1alpha1SyncOperation.Source = c.pV1alpha1ApplicationSourceToPV1alpha1ApplicationSource((*source).Source)
		var stringList []string
		if (*source).Manifests != nil {
			stringList = make([]string, len((*source).Manifests))
			for j := 0; j < len((*source).Manifests); j++ {
				stringList[j] = (*source).Manifests[j]
			}
		}
		v1alpha1SyncOperation.Manifests = stringList
		v1alpha1SyncOperation.SyncOptions = c.v1alpha1SyncOptionsToV1alpha1SyncOptions((*source).SyncOptions)
		v1alpha1SyncOperation.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources((*source).Sources)
		var stringList2 []string
		if (*source).Revisions != nil {
			stringList2 = make([]string, len((*source).Revisions))
			for k := 0; k < len((*source).Revisions); k++ {
				stringList2[k] = (*source).Revisions[k]
			}
		}
		v1alpha1SyncOperation.Revisions = stringList2
		pV1alpha1SyncOperation = &v1alpha1SyncOperation
	}
	return pV1alpha1SyncOperation
}
func (c *ConverterImpl) pV1alpha1SyncPolicyAutomatedToPV1alpha1SyncPolicyAutomated(source *SyncPolicyAutomated) *v1alpha1.SyncPolicyAutomated {
	var pV1alpha1SyncPolicyAutomated *v1alpha1.SyncPolicyAutomated
	if source != nil {
		var v1alpha1SyncPolicyAutomated v1alpha1.SyncPolicyAutomated
		var xbool bool
		if (*source).Prune != nil {
			xbool = *(*source).Prune
		}
		v1alpha1SyncPolicyAutomated.Prune = xbool
		var xbool2 bool
		if (*source).SelfHeal != nil {
			xbool2 = *(*source).SelfHeal
		}
		v1alpha1SyncPolicyAutomated.SelfHeal = xbool2
		var xbool3 bool
		if (*source).AllowEmpty != nil {
			xbool3 = *(*source).AllowEmpty
		}
		v1alpha1SyncPolicyAutomated.AllowEmpty = xbool3
		pV1alpha1SyncPolicyAutomated = &v1alpha1SyncPolicyAutomated
	}
	return pV1alpha1SyncPolicyAutomated
}
func (c *ConverterImpl) pV1alpha1SyncPolicyToPV1alpha1SyncPolicy(source *SyncPolicy) *v1alpha1.SyncPolicy {
	var pV1alpha1SyncPolicy *v1alpha1.SyncPolicy
	if source != nil {
		var v1alpha1SyncPolicy v1alpha1.SyncPolicy
		v1alpha1SyncPolicy.Automated = c.pV1alpha1SyncPolicyAutomatedToPV1alpha1SyncPolicyAutomated((*source).Automated)
		v1alpha1SyncPolicy.SyncOptions = c.v1alpha1SyncOptionsToV1alpha1SyncOptions2((*source).SyncOptions)
		v1alpha1SyncPolicy.Retry = c.pV1alpha1RetryStrategyToPV1alpha1RetryStrategy((*source).Retry)
		v1alpha1SyncPolicy.ManagedNamespaceMetadata = c.pV1alpha1ManagedNamespaceMetadataToPV1alpha1ManagedNamespaceMetadata((*source).ManagedNamespaceMetadata)
		pV1alpha1SyncPolicy = &v1alpha1SyncPolicy
	}
	return pV1alpha1SyncPolicy
}
func (c *ConverterImpl) pV1alpha1SyncStrategyApplyToPV1alpha1SyncStrategyApply(source *v1alpha1.SyncStrategyApply) *SyncStrategyApply {
	var pV1alpha1SyncStrategyApply *SyncStrategyApply
	if source != nil {
		var v1alpha1SyncStrategyApply SyncStrategyApply
		pBool := (*source).Force
		v1alpha1SyncStrategyApply.Force = &pBool
		pV1alpha1SyncStrategyApply = &v1alpha1SyncStrategyApply
	}
	return pV1alpha1SyncStrategyApply
}
func (c *ConverterImpl) pV1alpha1SyncStrategyHookToPV1alpha1SyncStrategyHook(source *v1alpha1.SyncStrategyHook) *SyncStrategyHook {
	var pV1alpha1SyncStrategyHook *SyncStrategyHook
	if source != nil {
		var v1alpha1SyncStrategyHook SyncStrategyHook
		var v1alpha1SyncStrategyApply SyncStrategyApply
		pBool := (*source).SyncStrategyApply.Force
		v1alpha1SyncStrategyApply.Force = &pBool
		v1alpha1SyncStrategyHook.SyncStrategyApply = v1alpha1SyncStrategyApply
		pV1alpha1SyncStrategyHook = &v1alpha1SyncStrategyHook
	}
	return pV1alpha1SyncStrategyHook
}
func (c *ConverterImpl) pV1alpha1SyncStrategyToPV1alpha1SyncStrategy(source *v1alpha1.SyncStrategy) *SyncStrategy {
	var pV1alpha1SyncStrategy *SyncStrategy
	if source != nil {
		var v1alpha1SyncStrategy SyncStrategy
		v1alpha1SyncStrategy.Apply = c.pV1alpha1SyncStrategyApplyToPV1alpha1SyncStrategyApply((*source).Apply)
		v1alpha1SyncStrategy.Hook = c.pV1alpha1SyncStrategyHookToPV1alpha1SyncStrategyHook((*source).Hook)
		pV1alpha1SyncStrategy = &v1alpha1SyncStrategy
	}
	return pV1alpha1SyncStrategy
}
func (c *ConverterImpl) timeTimeToTimeTime(source time.Time) time.Time {
	var timeTime time.Time
	return timeTime
}
func (c *ConverterImpl) v1TimeToPV1Time(source v1.Time) *v1.Time {
	v1Time := c.v1TimeToV1Time(source)
	return &v1Time
}
func (c *ConverterImpl) v1TimeToV1Time(source v1.Time) v1.Time {
	var v1Time v1.Time
	v1Time.Time = c.timeTimeToTimeTime(source.Time)
	return v1Time
}
func (c *ConverterImpl) v1alpha1ApplicationConditionToV1alpha1ApplicationCondition(source v1alpha1.ApplicationCondition) ApplicationCondition {
	var v1alpha1ApplicationCondition ApplicationCondition
	v1alpha1ApplicationCondition.Type = source.Type
	v1alpha1ApplicationCondition.Message = source.Message
	v1alpha1ApplicationCondition.LastTransitionTime = c.pV1TimeToPV1Time(source.LastTransitionTime)
	return v1alpha1ApplicationCondition
}
func (c *ConverterImpl) v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet(source v1alpha1.ApplicationSourceJsonnet) ApplicationSourceJsonnet {
	var v1alpha1ApplicationSourceJsonnet ApplicationSourceJsonnet
	var v1alpha1JsonnetVarList []JsonnetVar
	if source.ExtVars != nil {
		v1alpha1JsonnetVarList = make([]JsonnetVar, len(source.ExtVars))
		for i := 0; i < len(source.ExtVars); i++ {
			v1alpha1JsonnetVarList[i] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar(source.ExtVars[i])
		}
	}
	v1alpha1ApplicationSourceJsonnet.ExtVars = v1alpha1JsonnetVarList
	var v1alpha1JsonnetVarList2 []JsonnetVar
	if source.TLAs != nil {
		v1alpha1JsonnetVarList2 = make([]JsonnetVar, len(source.TLAs))
		for j := 0; j < len(source.TLAs); j++ {
			v1alpha1JsonnetVarList2[j] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar(source.TLAs[j])
		}
	}
	v1alpha1ApplicationSourceJsonnet.TLAs = v1alpha1JsonnetVarList2
	var stringList []string
	if source.Libs != nil {
		stringList = make([]string, len(source.Libs))
		for k := 0; k < len(source.Libs); k++ {
			stringList[k] = source.Libs[k]
		}
	}
	v1alpha1ApplicationSourceJsonnet.Libs = stringList
	return v1alpha1ApplicationSourceJsonnet
}
func (c *ConverterImpl) v1alpha1ApplicationSourceJsonnetToV1alpha1ApplicationSourceJsonnet2(source ApplicationSourceJsonnet) v1alpha1.ApplicationSourceJsonnet {
	var v1alpha1ApplicationSourceJsonnet v1alpha1.ApplicationSourceJsonnet
	var v1alpha1JsonnetVarList []v1alpha1.JsonnetVar
	if source.ExtVars != nil {
		v1alpha1JsonnetVarList = make([]v1alpha1.JsonnetVar, len(source.ExtVars))
		for i := 0; i < len(source.ExtVars); i++ {
			v1alpha1JsonnetVarList[i] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar2(source.ExtVars[i])
		}
	}
	v1alpha1ApplicationSourceJsonnet.ExtVars = v1alpha1JsonnetVarList
	var v1alpha1JsonnetVarList2 []v1alpha1.JsonnetVar
	if source.TLAs != nil {
		v1alpha1JsonnetVarList2 = make([]v1alpha1.JsonnetVar, len(source.TLAs))
		for j := 0; j < len(source.TLAs); j++ {
			v1alpha1JsonnetVarList2[j] = c.v1alpha1JsonnetVarToV1alpha1JsonnetVar2(source.TLAs[j])
		}
	}
	v1alpha1ApplicationSourceJsonnet.TLAs = v1alpha1JsonnetVarList2
	var stringList []string
	if source.Libs != nil {
		stringList = make([]string, len(source.Libs))
		for k := 0; k < len(source.Libs); k++ {
			stringList[k] = source.Libs[k]
		}
	}
	v1alpha1ApplicationSourceJsonnet.Libs = stringList
	return v1alpha1ApplicationSourceJsonnet
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter(source v1alpha1.ApplicationSourcePluginParameter) ApplicationSourcePluginParameter {
	var v1alpha1ApplicationSourcePluginParameter ApplicationSourcePluginParameter
	pString := source.Name
	v1alpha1ApplicationSourcePluginParameter.Name = &pString
	var pString2 *string
	if source.String_ != nil {
		xstring := *source.String_
		pString2 = &xstring
	}
	v1alpha1ApplicationSourcePluginParameter.String_ = pString2
	v1alpha1ApplicationSourcePluginParameter.OptionalMap = c.pV1alpha1OptionalMapToPV1alpha1OptionalMap(source.OptionalMap)
	v1alpha1ApplicationSourcePluginParameter.OptionalArray = c.pV1alpha1OptionalArrayToPV1alpha1OptionalArray(source.OptionalArray)
	return v1alpha1ApplicationSourcePluginParameter
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter2(source ApplicationSourcePluginParameter) v1alpha1.ApplicationSourcePluginParameter {
	var v1alpha1ApplicationSourcePluginParameter v1alpha1.ApplicationSourcePluginParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1ApplicationSourcePluginParameter.Name = xstring
	var pString *string
	if source.String_ != nil {
		xstring2 := *source.String_
		pString = &xstring2
	}
	v1alpha1ApplicationSourcePluginParameter.String_ = pString
	v1alpha1ApplicationSourcePluginParameter.OptionalMap = c.pV1alpha1OptionalMapToPV1alpha1OptionalMap2(source.OptionalMap)
	v1alpha1ApplicationSourcePluginParameter.OptionalArray = c.pV1alpha1OptionalArrayToPV1alpha1OptionalArray2(source.OptionalArray)
	return v1alpha1ApplicationSourcePluginParameter
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters(source v1alpha1.ApplicationSourcePluginParameters) ApplicationSourcePluginParameters {
	var v1alpha1ApplicationSourcePluginParameters ApplicationSourcePluginParameters
	if source != nil {
		v1alpha1ApplicationSourcePluginParameters = make(ApplicationSourcePluginParameters, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1ApplicationSourcePluginParameters[i] = c.v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter(source[i])
		}
	}
	return v1alpha1ApplicationSourcePluginParameters
}
func (c *ConverterImpl) v1alpha1ApplicationSourcePluginParametersToV1alpha1ApplicationSourcePluginParameters2(source ApplicationSourcePluginParameters) v1alpha1.ApplicationSourcePluginParameters {
	var v1alpha1ApplicationSourcePluginParameters v1alpha1.ApplicationSourcePluginParameters
	if source != nil {
		v1alpha1ApplicationSourcePluginParameters = make(v1alpha1.ApplicationSourcePluginParameters, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1ApplicationSourcePluginParameters[i] = c.v1alpha1ApplicationSourcePluginParameterToV1alpha1ApplicationSourcePluginParameter2(source[i])
		}
	}
	return v1alpha1ApplicationSourcePluginParameters
}
func (c *ConverterImpl) v1alpha1ApplicationSourceToV1alpha1ApplicationSource(source v1alpha1.ApplicationSource) ApplicationSource {
	var v1alpha1ApplicationSource ApplicationSource
	v1alpha1ApplicationSource.RepoURL = source.RepoURL
	pString := source.Path
	v1alpha1ApplicationSource.Path = &pString
	pString2 := source.TargetRevision
	v1alpha1ApplicationSource.TargetRevision = &pString2
	v1alpha1ApplicationSource.Helm = c.pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm(source.Helm)
	v1alpha1ApplicationSource.Kustomize = c.pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize(source.Kustomize)
	v1alpha1ApplicationSource.Directory = c.pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory(source.Directory)
	v1alpha1ApplicationSource.Plugin = c.pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin(source.Plugin)
	pString3 := source.Chart
	v1alpha1ApplicationSource.Chart = &pString3
	pString4 := source.Ref
	v1alpha1ApplicationSource.Ref = &pString4
	return v1alpha1ApplicationSource
}
func (c *ConverterImpl) v1alpha1ApplicationSourceTypeToV1alpha1ApplicationSourceType(source v1alpha1.ApplicationSourceType) ApplicationSourceType {
	return ApplicationSourceType(source)
}
func (c *ConverterImpl) v1alpha1ApplicationSourcesToV1alpha1ApplicationSources(source v1alpha1.ApplicationSources) ApplicationSources {
	var v1alpha1ApplicationSources ApplicationSources
	if source != nil {
		v1alpha1ApplicationSources = make(ApplicationSources, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1ApplicationSources[i] = c.v1alpha1ApplicationSourceToV1alpha1ApplicationSource(source[i])
		}
	}
	return v1alpha1ApplicationSources
}
func (c *ConverterImpl) v1alpha1ApplicationSourcesToV1alpha1ApplicationSources2(source ApplicationSources) v1alpha1.ApplicationSources {
	var v1alpha1ApplicationSources v1alpha1.ApplicationSources
	if source != nil {
		v1alpha1ApplicationSources = make(v1alpha1.ApplicationSources, len(source))
		for i := 0; i < len(source); i++ {
			var v1alpha1ApplicationSource v1alpha1.ApplicationSource
			v1alpha1ApplicationSource.RepoURL = source[i].RepoURL
			var xstring string
			if source[i].Path != nil {
				xstring = *source[i].Path
			}
			v1alpha1ApplicationSource.Path = xstring
			var xstring2 string
			if source[i].TargetRevision != nil {
				xstring2 = *source[i].TargetRevision
			}
			v1alpha1ApplicationSource.TargetRevision = xstring2
			v1alpha1ApplicationSource.Helm = c.pV1alpha1ApplicationSourceHelmToPV1alpha1ApplicationSourceHelm2(source[i].Helm)
			v1alpha1ApplicationSource.Kustomize = c.pV1alpha1ApplicationSourceKustomizeToPV1alpha1ApplicationSourceKustomize2(source[i].Kustomize)
			v1alpha1ApplicationSource.Directory = c.pV1alpha1ApplicationSourceDirectoryToPV1alpha1ApplicationSourceDirectory2(source[i].Directory)
			v1alpha1ApplicationSource.Plugin = c.pV1alpha1ApplicationSourcePluginToPV1alpha1ApplicationSourcePlugin2(source[i].Plugin)
			var xstring3 string
			if source[i].Chart != nil {
				xstring3 = *source[i].Chart
			}
			v1alpha1ApplicationSource.Chart = xstring3
			var xstring4 string
			if source[i].Ref != nil {
				xstring4 = *source[i].Ref
			}
			v1alpha1ApplicationSource.Ref = xstring4
			v1alpha1ApplicationSources[i] = v1alpha1ApplicationSource
		}
	}
	return v1alpha1ApplicationSources
}
func (c *ConverterImpl) v1alpha1ApplicationSummaryToV1alpha1ApplicationSummary(source v1alpha1.ApplicationSummary) ApplicationSummary {
	var v1alpha1ApplicationSummary ApplicationSummary
	var stringList []string
	if source.ExternalURLs != nil {
		stringList = make([]string, len(source.ExternalURLs))
		for i := 0; i < len(source.ExternalURLs); i++ {
			stringList[i] = source.ExternalURLs[i]
		}
	}
	v1alpha1ApplicationSummary.ExternalURLs = stringList
	var stringList2 []string
	if source.Images != nil {
		stringList2 = make([]string, len(source.Images))
		for j := 0; j < len(source.Images); j++ {
			stringList2[j] = source.Images[j]
		}
	}
	v1alpha1ApplicationSummary.Images = stringList2
	return v1alpha1ApplicationSummary
}
func (c *ConverterImpl) v1alpha1ComparedToToV1alpha1ComparedTo(source v1alpha1.ComparedTo) ComparedTo {
	var v1alpha1ComparedTo ComparedTo
	v1alpha1ComparedTo.Source = c.v1alpha1ApplicationSourceToV1alpha1ApplicationSource(source.Source)
	v1alpha1ComparedTo.Destination = c.FromArgoDestination(source.Destination)
	v1alpha1ComparedTo.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources(source.Sources)
	return v1alpha1ComparedTo
}
func (c *ConverterImpl) v1alpha1EnvToV1alpha1Env(source v1alpha1.Env) Env {
	var v1alpha1Env Env
	if source != nil {
		v1alpha1Env = make(Env, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1Env[i] = c.pV1alpha1EnvEntryToPV1alpha1EnvEntry(source[i])
		}
	}
	return v1alpha1Env
}
func (c *ConverterImpl) v1alpha1EnvToV1alpha1Env2(source Env) v1alpha1.Env {
	var v1alpha1Env v1alpha1.Env
	if source != nil {
		v1alpha1Env = make(v1alpha1.Env, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1Env[i] = c.pV1alpha1EnvEntryToPV1alpha1EnvEntry2(source[i])
		}
	}
	return v1alpha1Env
}
func (c *ConverterImpl) v1alpha1HelmFileParameterToV1alpha1HelmFileParameter(source v1alpha1.HelmFileParameter) HelmFileParameter {
	var v1alpha1HelmFileParameter HelmFileParameter
	pString := source.Name
	v1alpha1HelmFileParameter.Name = &pString
	pString2 := source.Path
	v1alpha1HelmFileParameter.Path = &pString2
	return v1alpha1HelmFileParameter
}
func (c *ConverterImpl) v1alpha1HelmFileParameterToV1alpha1HelmFileParameter2(source HelmFileParameter) v1alpha1.HelmFileParameter {
	var v1alpha1HelmFileParameter v1alpha1.HelmFileParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1HelmFileParameter.Name = xstring
	var xstring2 string
	if source.Path != nil {
		xstring2 = *source.Path
	}
	v1alpha1HelmFileParameter.Path = xstring2
	return v1alpha1HelmFileParameter
}
func (c *ConverterImpl) v1alpha1HelmParameterToV1alpha1HelmParameter(source v1alpha1.HelmParameter) HelmParameter {
	var v1alpha1HelmParameter HelmParameter
	pString := source.Name
	v1alpha1HelmParameter.Name = &pString
	pString2 := source.Value
	v1alpha1HelmParameter.Value = &pString2
	pBool := source.ForceString
	v1alpha1HelmParameter.ForceString = &pBool
	return v1alpha1HelmParameter
}
func (c *ConverterImpl) v1alpha1HelmParameterToV1alpha1HelmParameter2(source HelmParameter) v1alpha1.HelmParameter {
	var v1alpha1HelmParameter v1alpha1.HelmParameter
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	v1alpha1HelmParameter.Name = xstring
	var xstring2 string
	if source.Value != nil {
		xstring2 = *source.Value
	}
	v1alpha1HelmParameter.Value = xstring2
	var xbool bool
	if source.ForceString != nil {
		xbool = *source.ForceString
	}
	v1alpha1HelmParameter.ForceString = xbool
	return v1alpha1HelmParameter
}
func (c *ConverterImpl) v1alpha1InfoToV1alpha1Info(source Info) v1alpha1.Info {
	var v1alpha1Info v1alpha1.Info
	v1alpha1Info.Name = source.Name
	v1alpha1Info.Value = source.Value
	return v1alpha1Info
}
func (c *ConverterImpl) v1alpha1JsonnetVarToV1alpha1JsonnetVar(source v1alpha1.JsonnetVar) JsonnetVar {
	var v1alpha1JsonnetVar JsonnetVar
	v1alpha1JsonnetVar.Name = source.Name
	v1alpha1JsonnetVar.Value = source.Value
	pBool := source.Code
	v1alpha1JsonnetVar.Code = &pBool
	return v1alpha1JsonnetVar
}
func (c *ConverterImpl) v1alpha1JsonnetVarToV1alpha1JsonnetVar2(source JsonnetVar) v1alpha1.JsonnetVar {
	var v1alpha1JsonnetVar v1alpha1.JsonnetVar
	v1alpha1JsonnetVar.Name = source.Name
	v1alpha1JsonnetVar.Value = source.Value
	var xbool bool
	if source.Code != nil {
		xbool = *source.Code
	}
	v1alpha1JsonnetVar.Code = xbool
	return v1alpha1JsonnetVar
}
func (c *ConverterImpl) v1alpha1KustomizeImagesToV1alpha1KustomizeImages(source v1alpha1.KustomizeImages) KustomizeImages {
	var v1alpha1KustomizeImages KustomizeImages
	if source != nil {
		v1alpha1KustomizeImages = make(KustomizeImages, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeImages[i] = KustomizeImage(source[i])
		}
	}
	return v1alpha1KustomizeImages
}
func (c *ConverterImpl) v1alpha1KustomizeImagesToV1alpha1KustomizeImages2(source KustomizeImages) v1alpha1.KustomizeImages {
	var v1alpha1KustomizeImages v1alpha1.KustomizeImages
	if source != nil {
		v1alpha1KustomizeImages = make(v1alpha1.KustomizeImages, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeImages[i] = v1alpha1.KustomizeImage(source[i])
		}
	}
	return v1alpha1KustomizeImages
}
func (c *ConverterImpl) v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica(source v1alpha1.KustomizeReplica) KustomizeReplica {
	var v1alpha1KustomizeReplica KustomizeReplica
	v1alpha1KustomizeReplica.Name = source.Name
	v1alpha1KustomizeReplica.Count = c.intstrIntOrStringToIntstrIntOrString(source.Count)
	return v1alpha1KustomizeReplica
}
func (c *ConverterImpl) v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica2(source KustomizeReplica) v1alpha1.KustomizeReplica {
	var v1alpha1KustomizeReplica v1alpha1.KustomizeReplica
	v1alpha1KustomizeReplica.Name = source.Name
	v1alpha1KustomizeReplica.Count = c.intstrIntOrStringToIntstrIntOrString(source.Count)
	return v1alpha1KustomizeReplica
}
func (c *ConverterImpl) v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas(source v1alpha1.KustomizeReplicas) KustomizeReplicas {
	var v1alpha1KustomizeReplicas KustomizeReplicas
	if source != nil {
		v1alpha1KustomizeReplicas = make(KustomizeReplicas, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeReplicas[i] = c.v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica(source[i])
		}
	}
	return v1alpha1KustomizeReplicas
}
func (c *ConverterImpl) v1alpha1KustomizeReplicasToV1alpha1KustomizeReplicas2(source KustomizeReplicas) v1alpha1.KustomizeReplicas {
	var v1alpha1KustomizeReplicas v1alpha1.KustomizeReplicas
	if source != nil {
		v1alpha1KustomizeReplicas = make(v1alpha1.KustomizeReplicas, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1KustomizeReplicas[i] = c.v1alpha1KustomizeReplicaToV1alpha1KustomizeReplica2(source[i])
		}
	}
	return v1alpha1KustomizeReplicas
}
func (c *ConverterImpl) v1alpha1OperationInitiatorToV1alpha1OperationInitiator(source v1alpha1.OperationInitiator) OperationInitiator {
	var v1alpha1OperationInitiator OperationInitiator
	pString := source.Username
	v1alpha1OperationInitiator.Username = &pString
	pBool := source.Automated
	v1alpha1OperationInitiator.Automated = &pBool
	return v1alpha1OperationInitiator
}
func (c *ConverterImpl) v1alpha1OperationToV1alpha1Operation(source v1alpha1.Operation) Operation {
	var v1alpha1Operation Operation
	v1alpha1Operation.Sync = c.pV1alpha1SyncOperationToPV1alpha1SyncOperation(source.Sync)
	v1alpha1Operation.InitiatedBy = c.v1alpha1OperationInitiatorToV1alpha1OperationInitiator(source.InitiatedBy)
	var pV1alpha1InfoList []*Info
	if source.Info != nil {
		pV1alpha1InfoList = make([]*Info, len(source.Info))
		for i := 0; i < len(source.Info); i++ {
			pV1alpha1InfoList[i] = c.pV1alpha1InfoToPV1alpha1Info(source.Info[i])
		}
	}
	v1alpha1Operation.Info = pV1alpha1InfoList
	v1alpha1Operation.Retry = c.v1alpha1RetryStrategyToV1alpha1RetryStrategy(source.Retry)
	return v1alpha1Operation
}
func (c *ConverterImpl) v1alpha1ResourceIgnoreDifferencesToV1alpha1ResourceIgnoreDifferences(source ResourceIgnoreDifferences) v1alpha1.ResourceIgnoreDifferences {
	var v1alpha1ResourceIgnoreDifferences v1alpha1.ResourceIgnoreDifferences
	v1alpha1ResourceIgnoreDifferences.Group = source.Group
	v1alpha1ResourceIgnoreDifferences.Kind = source.Kind
	v1alpha1ResourceIgnoreDifferences.Name = source.Name
	v1alpha1ResourceIgnoreDifferences.Namespace = source.Namespace
	var stringList []string
	if source.JSONPointers != nil {
		stringList = make([]string, len(source.JSONPointers))
		for i := 0; i < len(source.JSONPointers); i++ {
			stringList[i] = source.JSONPointers[i]
		}
	}
	v1alpha1ResourceIgnoreDifferences.JSONPointers = stringList
	var stringList2 []string
	if source.JQPathExpressions != nil {
		stringList2 = make([]string, len(source.JQPathExpressions))
		for j := 0; j < len(source.JQPathExpressions); j++ {
			stringList2[j] = source.JQPathExpressions[j]
		}
	}
	v1alpha1ResourceIgnoreDifferences.JQPathExpressions = stringList2
	var stringList3 []string
	if source.ManagedFieldsManagers != nil {
		stringList3 = make([]string, len(source.ManagedFieldsManagers))
		for k := 0; k < len(source.ManagedFieldsManagers); k++ {
			stringList3[k] = source.ManagedFieldsManagers[k]
		}
	}
	v1alpha1ResourceIgnoreDifferences.ManagedFieldsManagers = stringList3
	return v1alpha1ResourceIgnoreDifferences
}
func (c *ConverterImpl) v1alpha1ResourceResultsToV1alpha1ResourceResults(source v1alpha1.ResourceResults) ResourceResults {
	var v1alpha1ResourceResults ResourceResults
	if source != nil {
		v1alpha1ResourceResults = make(ResourceResults, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1ResourceResults[i] = c.pV1alpha1ResourceResultToPV1alpha1ResourceResult(source[i])
		}
	}
	return v1alpha1ResourceResults
}
func (c *ConverterImpl) v1alpha1ResourceStatusToV1alpha1ResourceStatus(source v1alpha1.ResourceStatus) ResourceStatus {
	var v1alpha1ResourceStatus ResourceStatus
	pString := source.Group
	v1alpha1ResourceStatus.Group = &pString
	pString2 := source.Version
	v1alpha1ResourceStatus.Version = &pString2
	pString3 := source.Kind
	v1alpha1ResourceStatus.Kind = &pString3
	pString4 := source.Namespace
	v1alpha1ResourceStatus.Namespace = &pString4
	pString5 := source.Name
	v1alpha1ResourceStatus.Name = &pString5
	pString6 := c.v1alpha1SyncStatusCodeToString(source.Status)
	v1alpha1ResourceStatus.Status = &pString6
	v1alpha1ResourceStatus.Health = c.pV1alpha1HealthStatusToPV1alpha1HealthStatus(source.Health)
	pBool := source.Hook
	v1alpha1ResourceStatus.Hook = &pBool
	pBool2 := source.RequiresPruning
	v1alpha1ResourceStatus.RequiresPruning = &pBool2
	pInt64 := source.SyncWave
	v1alpha1ResourceStatus.SyncWave = &pInt64
	return v1alpha1ResourceStatus
}
func (c *ConverterImpl) v1alpha1RetryStrategyToV1alpha1RetryStrategy(source v1alpha1.RetryStrategy) RetryStrategy {
	var v1alpha1RetryStrategy RetryStrategy
	pInt64 := source.Limit
	v1alpha1RetryStrategy.Limit = &pInt64
	v1alpha1RetryStrategy.Backoff = c.pV1alpha1BackoffToPV1alpha1Backoff(source.Backoff)
	return v1alpha1RetryStrategy
}
func (c *ConverterImpl) v1alpha1RevisionHistoriesToV1alpha1RevisionHistories(source v1alpha1.RevisionHistories) RevisionHistories {
	var v1alpha1RevisionHistories RevisionHistories
	if source != nil {
		v1alpha1RevisionHistories = make(RevisionHistories, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1RevisionHistories[i] = c.v1alpha1RevisionHistoryToV1alpha1RevisionHistory(source[i])
		}
	}
	return v1alpha1RevisionHistories
}
func (c *ConverterImpl) v1alpha1RevisionHistoryToV1alpha1RevisionHistory(source v1alpha1.RevisionHistory) RevisionHistory {
	var v1alpha1RevisionHistory RevisionHistory
	pString := source.Revision
	v1alpha1RevisionHistory.Revision = &pString
	v1alpha1RevisionHistory.DeployedAt = c.v1TimeToPV1Time(source.DeployedAt)
	pInt64 := source.ID
	v1alpha1RevisionHistory.ID = &pInt64
	v1alpha1RevisionHistory.Source = c.v1alpha1ApplicationSourceToV1alpha1ApplicationSource(source.Source)
	v1alpha1RevisionHistory.DeployStartedAt = c.pV1TimeToPV1Time(source.DeployStartedAt)
	v1alpha1RevisionHistory.Sources = c.v1alpha1ApplicationSourcesToV1alpha1ApplicationSources(source.Sources)
	var stringList []string
	if source.Revisions != nil {
		stringList = make([]string, len(source.Revisions))
		for i := 0; i < len(source.Revisions); i++ {
			stringList[i] = source.Revisions[i]
		}
	}
	v1alpha1RevisionHistory.Revisions = stringList
	return v1alpha1RevisionHistory
}
func (c *ConverterImpl) v1alpha1SyncOperationResourceToV1alpha1SyncOperationResource(source v1alpha1.SyncOperationResource) SyncOperationResource {
	var v1alpha1SyncOperationResource SyncOperationResource
	pString := source.Group
	v1alpha1SyncOperationResource.Group = &pString
	v1alpha1SyncOperationResource.Kind = source.Kind
	v1alpha1SyncOperationResource.Name = source.Name
	pString2 := source.Namespace
	v1alpha1SyncOperationResource.Namespace = &pString2
	return v1alpha1SyncOperationResource
}
func (c *ConverterImpl) v1alpha1SyncOptionsToV1alpha1SyncOptions(source v1alpha1.SyncOptions) SyncOptions {
	var v1alpha1SyncOptions SyncOptions
	if source != nil {
		v1alpha1SyncOptions = make(SyncOptions, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1SyncOptions[i] = source[i]
		}
	}
	return v1alpha1SyncOptions
}
func (c *ConverterImpl) v1alpha1SyncOptionsToV1alpha1SyncOptions2(source SyncOptions) v1alpha1.SyncOptions {
	var v1alpha1SyncOptions v1alpha1.SyncOptions
	if source != nil {
		v1alpha1SyncOptions = make(v1alpha1.SyncOptions, len(source))
		for i := 0; i < len(source); i++ {
			v1alpha1SyncOptions[i] = source[i]
		}
	}
	return v1alpha1SyncOptions
}
func (c *ConverterImpl) v1alpha1SyncStatusCodeToString(source v1alpha1.SyncStatusCode) string {
	return string(source)
}
func (c *ConverterImpl) v1alpha1SyncStatusToV1alpha1SyncStatus(source v1alpha1.SyncStatus) SyncStatus {
	var v1alpha1SyncStatus SyncStatus
	v1alpha1SyncStatus.Status = c.v1alpha1SyncStatusCodeToString(source.Status)
	v1alpha1SyncStatus.ComparedTo = c.v1alpha1ComparedToToV1alpha1ComparedTo(source.ComparedTo)
	pString := source.Revision
	v1alpha1SyncStatus.Revision = &pString
	var stringList []string
	if source.Revisions != nil {
		stringList = make([]string, len(source.Revisions))
		for i := 0; i < len(source.Revisions); i++ {
			stringList[i] = source.Revisions[i]
		}
	}
	v1alpha1SyncStatus.Revisions = stringList
	return v1alpha1SyncStatus
}

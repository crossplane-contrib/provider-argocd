// Code generated by MockGen. DO NOT EDIT.
// Source: ../repositories/client.go
//
// Generated by this command:
//
//	mockgen -package repositories -destination=./repositories/mock.go -source=../repositories/client.go ServiceClient -build_flags=-mod=mod
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	repository "github.com/argoproj/argo-cd/v3/pkg/apiclient/repository"
	v1alpha1 "github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRepositoryServiceClient is a mock of RepositoryServiceClient interface.
type MockRepositoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryServiceClientMockRecorder
	isgomock struct{}
}

// MockRepositoryServiceClientMockRecorder is the mock recorder for MockRepositoryServiceClient.
type MockRepositoryServiceClientMockRecorder struct {
	mock *MockRepositoryServiceClient
}

// NewMockRepositoryServiceClient creates a new mock instance.
func NewMockRepositoryServiceClient(ctrl *gomock.Controller) *MockRepositoryServiceClient {
	mock := &MockRepositoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockRepositoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryServiceClient) EXPECT() *MockRepositoryServiceClientMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockRepositoryServiceClient) CreateRepository(ctx context.Context, in *repository.RepoCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepository", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockRepositoryServiceClientMockRecorder) CreateRepository(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepositoryServiceClient)(nil).CreateRepository), varargs...)
}

// DeleteRepository mocks base method.
func (m *MockRepositoryServiceClient) DeleteRepository(ctx context.Context, in *repository.RepoQuery, opts ...grpc.CallOption) (*repository.RepoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepository", varargs...)
	ret0, _ := ret[0].(*repository.RepoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockRepositoryServiceClientMockRecorder) DeleteRepository(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockRepositoryServiceClient)(nil).DeleteRepository), varargs...)
}

// Get mocks base method.
func (m *MockRepositoryServiceClient) Get(ctx context.Context, in *repository.RepoQuery, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryServiceClient)(nil).Get), varargs...)
}

// ListRepositories mocks base method.
func (m *MockRepositoryServiceClient) ListRepositories(ctx context.Context, in *repository.RepoQuery, opts ...grpc.CallOption) (*v1alpha1.RepositoryList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRepositories", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRepositoryServiceClientMockRecorder) ListRepositories(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRepositoryServiceClient)(nil).ListRepositories), varargs...)
}

// UpdateRepository mocks base method.
func (m *MockRepositoryServiceClient) UpdateRepository(ctx context.Context, in *repository.RepoUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRepository", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockRepositoryServiceClientMockRecorder) UpdateRepository(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockRepositoryServiceClient)(nil).UpdateRepository), varargs...)
}

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-argocd/apis/cluster/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ApplicationSet.
func (mg *ApplicationSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].List != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].List != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].List.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Clusters != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Clusters != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Clusters.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Git != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Git != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Git.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].SCMProvider != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].SCMProvider != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].SCMProvider.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].ClusterDecisionResource.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].PullRequest != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].PullRequest != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].PullRequest.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].List.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Clusters.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Git.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].SCMProvider.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].PullRequest.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Matrix.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Matrix.Generators[i5].Plugin.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Matrix != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Matrix.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].List.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Clusters.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Git.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].SCMProvider.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].ClusterDecisionResource.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].PullRequest.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Server),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.ServerRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.ServerSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Server")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Generators[i3].Merge.Generators); i5++ {
				if mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin != nil {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Name),
						Extract:      v1alpha1.ServerName(),
						Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.NameRef,
						Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.NameSelector,
						To: reference.To{
							List:    &v1alpha1.ClusterList{},
							Managed: &v1alpha1.Cluster{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Name")
					}
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Generators[i3].Merge.Generators[i5].Plugin.Template.Spec.Destination.NameRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Merge != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Merge.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Plugin != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Server),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.ServerRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.ServerSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Server")
			}
			mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Generators); i3++ {
		if mg.Spec.ForProvider.Generators[i3].Plugin != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Name),
				Extract:      v1alpha1.ServerName(),
				Reference:    mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.NameRef,
				Selector:     mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.NameSelector,
				To: reference.To{
					List:    &v1alpha1.ClusterList{},
					Managed: &v1alpha1.Cluster{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Name")
			}
			mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Generators[i3].Plugin.Template.Spec.Destination.NameRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Spec.Destination.Server),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.Template.Spec.Destination.ServerRef,
		Selector:     mg.Spec.ForProvider.Template.Spec.Destination.ServerSelector,
		To: reference.To{
			List:    &v1alpha1.ClusterList{},
			Managed: &v1alpha1.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Template.Spec.Destination.Server")
	}
	mg.Spec.ForProvider.Template.Spec.Destination.Server = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.Template.Spec.Destination.ServerRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Spec.Destination.Name),
		Extract:      v1alpha1.ServerName(),
		Reference:    mg.Spec.ForProvider.Template.Spec.Destination.NameRef,
		Selector:     mg.Spec.ForProvider.Template.Spec.Destination.NameSelector,
		To: reference.To{
			List:    &v1alpha1.ClusterList{},
			Managed: &v1alpha1.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Template.Spec.Destination.Name")
	}
	mg.Spec.ForProvider.Template.Spec.Destination.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.Template.Spec.Destination.NameRef = rsp.ResolvedReference

	return nil
}
